
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
spec:
  replicas: {{ .Values.api.replicas }}
  selector: { matchLabels: { app: api } }
  template:
    metadata:
      labels: { app: api }
    spec:
      containers:
      - name: api
        image: {{ .Values.images.api }}
        ports: [{ containerPort: {{ .Values.api.service.port }} }]
        env:
        {{- range $k, $v := .Values.api.env }}
        - name: {{ $k }}
          value: {{ tpl $v $ | quote }}
        {{- end }}
        - name: DB_USERNAME
          valueFrom: { secretKeyRef: { name: app-secrets, key: {{ .Values.api.secretKeys.DB_USERNAME }} } }
        - name: DB_PASSWORD
          valueFrom: { secretKeyRef: { name: app-secrets, key: {{ .Values.api.secretKeys.DB_PASSWORD }} } }
        readinessProbe:
          httpGet: { path: {{ .Values.api.probes.path | quote }}, port: {{ .Values.api.service.port }} }
          initialDelaySeconds: 5
        livenessProbe:
          httpGet: { path: {{ .Values.api.probes.path | quote }}, port: {{ .Values.api.service.port }} }
          initialDelaySeconds: 15
        resources: {{- toYaml .Values.api.resources | nindent 10 }}
---
apiVersion: v1
kind: Service
metadata:
  name: api
spec:
  selector: { app: api }
  ports:
  - name: http
    port: {{ .Values.api.service.port }}
    targetPort: {{ .Values.api.service.port }}




apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  replicas: {{ .Values.web.replicas }}
  selector: { matchLabels: { app: web } }
  template:
    metadata:
      labels: { app: web }
    spec:
      containers:
      - name: web
        image: {{ .Values.images.web }}
        ports: [{ containerPort: {{ .Values.web.service.port }} }]
        env:
        {{- range $k, $v := .Values.web.env }}
        - name: {{ $k }}
          value: {{ tpl $v $ | quote }}
        {{- end }}
        - name: NEXTAUTH_SECRETS
          valueFrom: { secretKeyRef: { name: app-secrets, key: {{ .Values.web.secretKeys.NEXTAUTH_SECRETS }} } }
        readinessProbe:
          httpGet: { path: {{ .Values.web.probes.path | quote }}, port: {{ .Values.web.service.port }} }
          initialDelaySeconds: 5
        livenessProbe:
          httpGet: { path: {{ .Values.web.probes.path | quote }}, port: {{ .Values.web.service.port }} }
          initialDelaySeconds: 15
        resources: {{- toYaml .Values.web.resources | nindent 10 }}
---
apiVersion: v1
kind: Service
metadata:
  name: web
spec:
  selector: { app: web }
  ports:
  - name: http
    port: {{ .Values.web.service.port }}
    targetPort: {{ .Values.web.service.port }}





{{- if .Values.dbInit.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: db-init
spec:
  backoffLimit: 2
  template:
    metadata:
      labels: { app: db-init }
    spec:
      restartPolicy: Never
      containers:
      - name: db-init
        image: {{ .Values.images.dbInit }}
        command: {{- toYaml .Values.dbInit.command | nindent 10 }}
        env:
        {{- range $k, $v := .Values.dbInit.env }}
        - name: {{ $k }}
          value: {{ tpl $v $ | quote }}
        {{- end }}
        - name: DB_USERNAME
          valueFrom: { secretKeyRef: { name: app-secrets, key: {{ .Values.dbInit.secretKeys.DB_USERNAME }} } }
        - name: DB_PASSWORD
          valueFrom: { secretKeyRef: { name: app-secrets, key: {{ .Values.dbInit.secretKeys.DB_PASSWORD }} } }
        # Simple wait for DB readiness (swap for a migration tool if you have one)
        readinessProbe:
          exec: { command: ["sh","-c","pg_isready -h $DB_HOST -p $DB_PORT -d $DB_DATABASE -U $DB_USERNAME"] }
          initialDelaySeconds: 5
{{- end }}


{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jjrd
  annotations:
    {{- toYaml .Values.ingress.annotations | nindent 4 }}
spec:
  ingressClassName: {{ .Values.global.ingressClassName }}
  {{- if .Values.ingress.tls.enabled }}
  tls:
  - hosts: [ {{ .Values.ingress.host | quote }} ]
    secretName: {{ .Values.ingress.tls.secretName }}
  {{- end }}
  rules:
  - host: {{ .Values.ingress.host }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend: { service: { name: web, port: { number: {{ .Values.web.service.port }} } } }
      - path: /api
        pathType: Prefix
        backend: { service: { name: api, port: { number: {{ .Values.api.service.port }} } } }
{{- end }}

